<!doctype html>

<html>
    <head>
        <meta charset="utf-8">

        <title>Blank template</title>

        <!-- Load external CSS styles -->
        <link rel="stylesheet" href="styles.css">

    </head>

    <body>

        <p>
          <br>
          #01---------------------------------------------------------------------------
# Feladat: Két szám összege.
# Írj egy függvényt "osszead" néven, amely két számot kap és visszatér a két szám összegével.
<br>

def osszead(a, b):
    return a + b


<br>
<br>
#02-------------------------------------------------------------------
# Feladat: Melyik a kisebb?
# Írj egy függvényt "kisebb" néven, amely két számot kap és visszatér a legkisebbel.
<br>
def kisebb(a, b):
    return a if b > a else b


<br>
<br>
#03---------------------------------------------------------------------------
# Feladat: Melyik a nagyobb?
# Írj egy függvényt "nagyobb" néven, amely két számot kap és visszatér a legnagyobbal.
<br>
def nagyobb(a, b):
    return a if a > b else b


<br>
<br>
#04---------------------------------------------------------------------------
# Feladat: Számtani közép
# Írj "szamtani_kozep" néven függvényt, amely két számot kap bemenetként és visszatér a számtani középpel.
<br>
def szamtani_kozep(a, b):
    return (a + b) / 2


<br>
<br>
#05---------------------------------------------------------------------------
# Feladat: Négyzet kerülete
# Írj "negyzet_kerulet" néven függvényt, amely egy négyzet oldalhosszát kapja bemenetként és visszatér a négyzet kerületével.
<br>
def negyzet_kerulet(a):
    return a * 4


<br>
<br>
#06---------------------------------------------------------------------------
# Feladat: Négyzet területe
# Írj "negyzet_terulet" néven függvényt, amely egy négyzet oldalhosszát kapja bemenetként és visszatér a négyzet területével.
<br>
def negyzet_terulet(a):
    return a**2


<br>
<br>
#07---------------------------------------------------------------------------
# Feladat: Téglalap kerülete
# Írj "teglalap_kerulet" néven függvényt, amely egy téglalap oldalhosszait kapja bemenetként és visszatér a téglalap kerületével.
<br>
def teglalap_kerulet(a, b):
    return (a + b) * 2


assert teglalap_kerulet(5, 6) == 22
<br>
<br>
#08---------------------------------------------------------------------------
# Feladat: Téglalap területe
# Írj "teglalap_terulet" néven függvényt, amely egy téglalap oldalhosszait kapja bemenetként és visszatér a téglalap területével.
<br>
def teglalap_terulet(a, b):
    return a * b



<br>
<br>
#09------------------------------------------------------------------------------------------------------------


# Feladat: Két szám különbsége
# Írj "kulonbseg" néven függvényt, amely két számot kap bemenetként és visszatér a két szám különbségével.
<br>
def kulonbseg(a, b):
    return a - b



<br>
<br>
#10------------------------------------------------------------------------------------------------------------


# Feladat: Maradékos osztás:
# Írj egy "maradek" nevü függvényt, amely két számot kap bemenetként és visszatér a két szám osztásának maradékával.
<br>
def maradek(a, b):
    return a % b



<br>
<br>
#11------------------------------------------------------------------------------------------------------------
# Feladat: Páros szám:
#Írj egy "paros" nevü függvényt, amely egy számot kap bemenetként, majd True-val tér vissza, ha a szám páros és False-al ha a szám páratlan.
<br>
def paros(a):
    return a % 2 == 0


assert paros(9) == False
assert paros(8) == True
<br>
<br>
#12------------------------------------------------------------------------------------------------------------

# Feladat: Kettővel osztható:
# Írj egy "kettovel_oszthato" nevü függvényt, amely egy számot kap bemenetként és True-val tér vissza, ha a szám kettővel osztható és False-al ha nem.
<br>
def kettovel_oszthato(a):
    return a % 2 == 0

<br>
<br>
#13------------------------------------------------------------------------------------------------------------
# Feladat: Hárommal osztható:
# Írj egy "harommal_oszthato" nevü függvényt, amely egy számot kap bemenetként és True-val tér vissza, ha a szám hárommal osztható és False-al ha nem.
<br>
def harommal_oszthato(a):
    return a % 3 == 0


assert harommal_oszthato(15) == True
assert harommal_oszthato(16) == False
<br>
<br>
#14------------------------------------------------------------------------------------------------------------
# Feladat: Héttel osztható:
# Írj egy "hettel_oszthato" nevü függvényt , amely egy számot kap bemenetként és True-val tér vissza, ha a szám héttel osztható és False-al ha nem.
<br>
def hettel_oszthato(a):
    return a % 7 == 0


assert hettel_oszthato(21) == True
assert hettel_oszthato(22) == False
<br>
<br>
#15------------------------------------------------------------------------------------------------------------
# Feladat: Kocka térfogat:
# Írj egy "kocka_terfogat" nevü függvényt , amely bemenetként megkapja a kocka oldal hosszúságát és a kocka térfogatával tér vissza.
<br>
def kocka_terfogat(a):
    return a**3


<br>
<br>
#16------------------------------------------------------------------------------------------------------------
# Feladat: Téglatest térfogat:
# Írj egy "teglatest_terfogat" nevü függvényt , amely bemenetként megkapja a téglatest oldalainak hosszúságát és a téglatest térfogatával tér vissza.
<br>
def teglatest_terfogat(a, b, c):
    return a * b * c


assert teglatest_terfogat(2, 3, 4) == 24
<br>
<br>
#17------------------------------------------------------------------------------------------------------------
# Feladat: Derékszögü háromszög területe:
# Írj egy "derekszogu_haromszog_terulet" nevü függvényt , amely bemenetként megkapja a befogók hosszát és a háromszög területével tér vissza.
<br>
def derekszogu_haromszog_terulet(a, b):
    return (a * b) / 2

<br>
<br>
#18-----------------------------------------------------------------------------------------------------------
# Feladat: Derékszögü háromszög átfogója:
# Írj egy "derekszogu_haromszog_atfogo" nevü függvényt , amely bemenetként megkapja a befogók hosszát és az átló hosszával tér vissza.
<br>
def derekszogu_haromszog_atfogo(a, b):
    return (a**2 + b**2)**0.5




<br>
<br>
#19-----------------------------------------------------------------------------------------------------------
# Feladat: Négyzet átlója:
# Írj egy "negyzet_atloja" nevü függvényt , amely bemenetként megkapja a négyzet oldalának hosszát és az átló hosszával tér vissza.
<br>
def negyzet_atloja(a):
    return a * (2**0.5)
<br>
<br>
#20-----------------------------------------------------------------------------------------------------------
# Feladat: Téglalap átlója:
# Írj egy "teglalap_atloja" nevü függvényt , amely bemenetként megkapja az oldalak hosszát és az átló hosszával tér vissza.
<br>
def teglalap_atloja(a, b):
    return (a**2 + b**2)**0.5
<br>
<br>
#21-----------------------------------------------------------------------------------------------------------
# Feladat: Abszolútérték:
# Írj egy "abszolut" nevü függvényt , amely a bemenő paraméterként kapott szám abszolút értékével tér vissza.
def abszolut(a):
    return a if a > 0 else -a

        </p>
        <br>
    <p>
      #1--------------------------------------------------------------------------------------------


# Feladat: Első karakter
# Írj egy függvényt elso_karakter néven amely visszatér az adott string első karakterével!
<br>
def elso_karakter(text):
    return text[0]


<br>
<br>
#2--------------------------------------------------------------------------------------------


# Feladat: Utolsó karakter
# Írj egy függvényt utolso_karakter néven  amely visszatér az adott string utolso karakterével!
<br>

def utolso_karakter(text):
    return text[-1]



<br>
<br>
#3--------------------------------------------------------------------------------------------


# Feladat: Legkisebb szám a listában. [Programozási tétel: Minimum kiválasztás]
# Készíts függvényt legkisebb néven,  amely visszatér egy számokat tartalmazó lista legkisebb számával.
# Figyelem! A feladat megoldása során nem használhatod a min függvényt!
<br>
def legkisebb(lista):
    return sorted(lista)[0]



<br>
<br>
#4-------------------------------------------------------------------------------------------


# Feladat: Legnagyobb szám a listában. [Programozási tétel: Maximum kiválasztás]
# Készíts függvényt legnagyobb néven,  amely visszatér egy számokat tartalmazó lista legnagyobb számával.
# Figyelem! A feladat megoldása során nem használhatod a max függvényt!
<br>
def legnagyobb(lista):
    return sorted(lista)[-1]



<br>
<br>
#5-------------------------------------------------------------------------------------------


# Feladat: Listaban levő számok összege. [Programozási tétel: Összegzés]
# Készíts függvényt osszeg néven,  amely visszatér egy számokat tartalmazó lista számainak összegével.
# Figyelem! A feladat megoldása során nem használhatod a sum függvényt!
<br>
def osszeg(lista):
    ossz = 0
    for i in lista:
        ossz += i
    return ossz



<br>
<br>
#6-------------------------------------------------------------------------------------------


# Feladat: Listában levő számok szorzata.
# Készíts függvényt szorzat néven,  amely visszatér egy számokat tartalmazó lista számainak szorzatával.
<br>
def szorzat(lsita):
    szorzo = 1
    for i in lsita:
        szorzo *= i
    return szorzo




#7-------------------------------------------------------------------------------------------


# Feladat: Páros számok száma a listában. [Programozási tétel: Megszámolás]
# Készíts függvényt parosok_szama néven,  amely visszatér egy számokat tartalmazó lista páros számainak számával.
<br>
def parosok_szama(lista):
    return len([i for i in lista if i % 2 == 0])


<br>
<br>
#8-------------------------------------------------------------------------------------------


# Feladat: Páratlan számok száma a listában. [Programozási tétel: Megszámolás]
# Készíts függvényt paratlanok_szama néven,  amely visszatér egy számokat tartalmazó lista páros számainak számával.
<br>
def paratlanok_szama(lista):
    return len([i for i in lista if i % 2 == 1])



<br>
<br>
#9-------------------------------------------------------------------------------------------


# Feladat: Pozitív számok száma a listában. [Programozási tétel: Megszámolás]
# Készíts függvényt pozitivok_szama néven,  amely visszatér egy számokat tartalmazó lista pozitív számainak számával.
<br>
def pozitivok_szama(lista):
    return len([i for i in lista if i > 0])



<br>
<br>
#10-------------------------------------------------------------------------------------------


# Feladat: Negatív számok száma a listában. [Programozási tétel: Megszámolás]
# Készíts függvényt negativok_szama néven,  amely visszatér egy számokat tartalmazó lista negativ számainak számával.
<br>
def negativok_szama(lista):
    return len([i for i in lista if i < 0])



<br>
<br>
#11-------------------------------------------------------------------------------------------
# Feladat: Benne van a szám a listában? [Programozási tétel: Eldöntés]
# Készíts függvényt benne_van_a_listaban néven,  amelynek első paramétere egy számokat tartalmazó lista, a második paramétere egy szám.
# A visszatérési érték True, ha  a szám benne van a listában.
# A visszatérési érték False, ha  a szám nics benne a listában.
<br>
def benne_van_a_listaban(lista, szam):
    return szam in lista




<br>
<br>
#12-------------------------------------------------------------------------------------------
# Feladat: Benne van a betü a stringben? [Programozási tétel: Eldöntés]
# Készíts függvényt benne_van_a_stringben néven,  amelynek első paramétere egy string, a második paramétere egy betü.
# A visszatérési érték True, ha  a betü benne van a stringben.
# A visszatérési érték False, ha  a betü nics benne a stringben.
<br>
def benne_van_a_stringben(szoveg, karakter):
    return karakter in szoveg



<br>
<br>
#13-------------------------------------------------------------------------------------------


# Feladat: Hányadik a listában? [Programozási tétel: Kiválasztás]
#          A listában a szám garantáltan megtalálható, nem kell vizsgálni a meglétét.
# Készíts függvényt hanyadik_a_listaban néven,  amelynek első paramétere egy számokat tartalmazó lista, a második paramétere egy szám.
# A visszatérési érték a paraméterként megadott szám első előfordulási helye a listában.
<br>
def hanyadik_a_listában(lista, szam):
    return lista.index(szam)




<br>
<br>
#14-------------------------------------------------------------------------------------------
# Feladat: Hányadik a stringben? [Programozási tétel: Kiválasztás]
#          A betü garantáltan megtalálható a stringben, nem kell vizsgálnunk a meglétét.
# Készíts függvényt hanyadik_a_stringben néven, amelynek első paramétere egy string, a második paramétere egy betü.
# A visszatérési érték a paraméterként megadott betü első előfordulási helye a stringben.
<br>
def hanyadik_a_stringben(szoveg, karakter):
    return szoveg.index(karakter)




<br>
<br>
#15-------------------------------------------------------------------------------------------
# Feladat: Benne van-e a listában és hanyadik helyen? [Programozási tétel: Keresés]
# Készíts függvényt kereses_a_listaban néven,  amelynek első paramétere egy számokat tartalmazó lista, a második paramétere egy szám.
# Ha a szám benne van a listában, akkor a visszatérési érték a paraméterként megadott szám első előfordulási helye a listában.
# A visszatérési érték None, ha  a szám nics benne a listában.
<br>
def kereses_a_listaban(lista, szam):
    if szam in lista:
        return lista.index(szam)



<br>
<br>
#16-------------------------------------------------------------------------------------------
# Feladat: Hányadik a stringben? [Programozási tétel: Keresés]
# Készíts függvényt kereses_a_stringben néven, amelynek első paramétere egy string, a második paramétere egy betü.
# A visszatérési érték a paraméterként megadott betü első előfordulási helye a stringben.
# A visszatérési érték None, ha  a betü nics benne a stringben.
<br>
def kereses_a_stringben(szoveg, karakter):
    if karakter in szoveg:
        return szoveg.index(karakter)


<br>
<br>
#17-------------------------------------------------------------------------------------------


# Feladat: Páros számok kiválogatása egy listából. [Programozási tétel: Kiválogatás]
# Készíts függvényt parosok_kivalogatasa néven,  amely visszatér egy listával amely a paraméterként átadott számokat tartalmazó lista páros számait tartalmazza.
<br>
def parosok_kivalogatasa(lista):
    return [i for i in lista if i % 2 == 0]



<br>
<br>
#18-------------------------------------------------------------------------------------------


# Feladat: Páratlan számok számok kiválogatása egy listából. [Programozási tétel: Kiválogatás]
# Készíts függvényt paratlanok_kivalogatasa néven,  amely visszatér egy listával amely a paraméterként átadott számokat tartalmazó lista páratlan számait tartalmazza.
<br>
def paratlanok_kivalogatasa(lista):
    return [i for i in lista if i % 2 == 1]



<br>
<br>
#19-------------------------------------------------------------------------------------------


# Feladat: Pozitív számok kiválogatása egy listából. [Programozási tétel: Kiválogatás]
# Készíts függvényt pozitivok_kivalogatasa néven,  amely visszatér egy listával amely a paraméterként átadott számokat tartalmazó lista pozitiv számait tartalmazza.
<br>
def pozitivok_kivalogatasa(lista):
    return [i for i in lista if i > 0]


<br>
<br>
#20-------------------------------------------------------------------------------------------


# Feladat: Negatív számok számok kiválogatása egy listából. [Programozási tétel: Kiválogatás]
# Készíts függvényt negatívok_kivalogatasa néven,  amely visszatér egy listával amely a paraméterként átadott számokat tartalmazó lista negatív számait tartalmazza.
<br>
def negativok_kivalogatasa(lista):
    return [i for i in lista if i < 0]


<br>
<br>
#21-------------------------------------------------------------------------------------------


# Feladat: Két halmaz metszete. [Programozási tétel: Metszet]
# Készíts függvényt halmazok_metszete néven, amely két paraméterként átadott halmaz azonos elemeivel mint halmazzal tér vissza.
<br>
def halmazok_metszete(h1, h2):
    return h1 & h2



<br>
<br>
#22-------------------------------------------------------------------------------------------


# Feladat: Két lista metszete. [Programozási tétel: Metszet]
# Készíts függvényt listak_metszete néven, amely két paraméterként átadott lista azonos elemeivel mint listával tér vissza.
<br>
def listak_metszete(l1, l2):
    return list(set(l1) & set(l2))



<br>
<br>
#23-------------------------------------------------------------------------------------------


# Feladat: Két halmaz uniója. [Programozási tétel: Unió]
# Készíts függvényt halmazok_unioja néven, amely két paraméterként átadott halmaz minden elemeivel mint halmazzal tér vissza.
<br>
<br>
def halmazok_unioja(h1, h2):
    return h1 | h2


<br>
<br>
#24-------------------------------------------------------------------------------------------


# Feladat: Listaban levő számok átlaga (számtani közepe).
# Készíts függvényt lista_atlag néven,  amely visszatér egy számokat tartalmazó lista számainak átlagával.
<br>
def lista_atlag(lista):
    return sum(lista) / len(lista)



<br>
<br>
#25-------------------------------------------------------------------------------------------


# Feladat: Faktoriális.
# Készíts függvényt faktorialis néven,  amely visszatér a paraméterként megkapott szám faktoriálisával.
<br>
def faktorialis(szam):
    return 1 if szam == 0 else szam * faktorialis(szam - 1)



    </p>
    <p>
#01===================================================================================
# Feladat: Karakterek száma a fájlban.
# Írj egy függvényt karakterek_szama néven amely paraméterként egy fájlnevet kap és visszatér a fájlban levő karakterek számával. ('\n karakterekkel együtt')
<br>
def karakterek_szama(file):
    return len(open(file).read())




<br>
<br>
#02-------------------------------------------------------------
# Feladat: Szavak száma a fájlban.
# Írj egy függvényt szavak_szama néven amely paraméterként egy fájlnevet kap és visszatér a fájlban levő szavak számával.
<br>
def szavak_szama(file):
    return len(open(file).read().split())

<br>
<br>
#03-------------------------------------------------------------
# Feladat: Sorok száma a fájlban.
# A sorok_szama(fname) függvény visszatér a  fájlban levő sorok számával.
<br>
def sorok_szama(file):
    return len(open(file).readlines())




<br>
<br>
#04-------------------------------------------------------------
# Feladat: r betük száma a fájlban.
# Az r_betuk_szama(fname) függvény visszatér a  fájlban levő 'r' betük számával.
<br>
def r_betuk_szama(file):
    return open(file).read().count("r")




<br>
<br>
#05.-------------------------------------------------------------
# Feladat: lorem szavak száma a fájlban.
# 5. A lorem_szavak_szama(fname) függvény visszatér a  fájlban levő "lorem" szavak számával.
<br>
def lorem_szavak_szama(file):
    return open(file).read().count("lorem")


<br>
<br>
#06-------------------------------------------------------------
# Feladat: A leggyakoribb karakter a fájlban.
# A leggyakoribb_karakter(fname) függvény visszatér a  fájlban leggyakrabban előforduló karakterrel.
<br>
def leggyakoribb_karakter(fname):
    <br>karakter = list(open(fname).read())
    <br>return max(set(karakter), key=karakter.count)
   



<br>
<br>
#07-------------------------------------------------------------
# Feladat: A leghosszabb sor hossza a fájlban.
# A leghosszabb_sor_hossza(fname) függvény visszatér a  fájlban levő leghosszabb sor hosszával.
<br>
def leghosszabb_sor_hossza(file):
    return max(len(i) for i in open(file).readlines())




<br>
<br>
#08-------------------------------------------------------------
# Feladat: Téglalap osztály definiálása. [Objektumorientált programozás]
# Hozz létre egy osztályt Teglalap néven.
# A Teglalap osztály lehetővé teszi a téglalap oldalhosszúságainak tárolását.
# A Teglalap osztály rendelkezik egy kerulet() nevü metódussal, amely az osztály segítségével létrehozott objektum metódusaként visszaadja az adott objektum kerületét.
# A Teglalap osztály rendelkezik egy terulet() nevü metódussal, amely az osztály segítségével létrehozott objektum metódusaként visszaadja az adott objektum területét.
<br>
class Teglalap:<br>
    def __init__(self, a, b):
        self.a = a
        self.b = b
<br>
    def kerulet(self):
        return (self.a + self.b) * 2
<br>
    def terulet(self):
        return (self.a * self.b)



<br>
<br>
#09-------------------------------------------------------------
# Feladat: Négyzet osztály definiálása. [Objektumorientált programozás]
# Hozz létre egy osztályt Negyzet néven.
# A Negyzet osztály lehetővé teszi a negyzet oldalhosszúságának tárolását.
# A Negyzet osztály rendelkezik egy kerulet() nevü metódussal, amely az osztály segítségével létrehozott objektum metódusaként visszaadja az adott objektum kerületét.
# A Negyzet osztály rendelkezik egy terulet() nevü metódussal, amely az osztály segítségével létrehozott objektum metódusaként visszaadja az adott objektum területét.
<br>
class Negyzet:<br>
    def __init__(self, a):
        self.a = a
<br>
    def kerulet(self):
        return self.a * 4
<br>
    def terulet(self):
        return self.a**2




<br>
<br>
#10-------------------------------------------------------------
# Feladat: Kocka osztály definiálása. [Objektumorientált programozás]
# Hozz létre egy osztályt Kocka néven.
# A Kocka osztály lehetővé teszi a kocka oldalhosszúságának tárolását.
# A Kocka osztály rendelkezik egy tefogat() nevü metódussal, amely az osztály segítségével létrehozott objektum metódusaként visszaadja az adott objektum térfogatát.
# A Kocka osztály rendelkezik egy felszin() nevü metódussal, amely az osztály segítségével létrehozott objektum metódusaként visszaadja az adott objektum felszínét.
<br>
class Kocka:<br>
    def __init__(self, a):
        self.a = a
<br>
    def terfogat(self):
        return self.a**3
<br>
    def felszin(self):
        return (self.a**2) * 6



<br>
<br>
#11-------------------------------------------------------------
# Feladat: String fájlba írása
# Készíts függvényt string_fajlba néven, amely az első paraméterként kapott sztringet fájlba írja.
# A fájl nevét második paraméterként kapja meg a függvény.
<br>
def string_fajlba(szoveg, file):
    open(file, "w").write(szoveg)



<br>
<br>
#12-------------------------------------------------------------
# Feladat: Számtani sorozat fájlba írása
# Készíts függvényt szaz_szam_fajlba néven, amely 1-tól 100-ig egyesével kiírja a számokat egy fájlba.
# Minden szám kerüljön új sorba.
# A fájl nevét paraméterként kapja meg a függvény.
<br>
def szaz_szam_fajlba(file):
    open(file, "w").writelines(str(i) + "\n" for i in range(1, 101))


<br>
<br>
#13--------------------------------------------------------------------------------------------


# Feladat: Első karakter a szövegfájlban
# Írj egy függvényt elso_karakter_a_fajlban néven, amely visszatér egy szövegfájl első karakterével.
# A függvény bemenő paramétere a fájl neve.
<br>
def elso_karakter_a_fajlban(file):
    return open(file).read()[0]




#14--------------------------------------------------------------------------------------------


# Feladat: Utolsó karakter a szövegfájlban
# Írj egy függvényt utolso_karakter_a_fajlban néven, amely visszatér egy szövegfájl utolsó karakterével.
# A függvény bemenő paramétere a fájl neve.
<br>
def utolso_karakter_a_fajlban(file):
    return open(file).read()[-1]

<br>
<br>
#15--------------------------------------------------------------------------------------------

# Feladat: Számok összege egy szövegfájlban.
# Írj egy függvényt szamok_osszege_a_fajlban néven amely visszatér egy szövegfájlban levő számok összegével.
# A függvény bemenő paramétere a fájl neve.
<br>
def szamok_osszege_a_fajlban(file):
    return sum(int(i) for i in open(file).read().split())



<br>
<br>
#16--------------------------------------------------------------------------------------------
# Feladat: Számok átlaga egy szövegfájlban.
# Írj egy függvényt szamok_atlaga_a_fajlban néven, amely visszatér egy szövegfájlban levő számok átlagával.
# A függvény bemenő paramétere a fájl neve.
<br>
def szamok_atlaga_a_fajlban(file):
    return sum([int(i) for i in open(file).read().split()]) / len(
        <br>[int(i) for i in open(file).read().split()])


<br>
<br>
#17--------------------------------------------------------------------------------------------


# Feladat: Páros számok száma egy szövegfájlban.
# Írj egy függvényt paros_szamok_szama_a_fajlban néven, amely visszatér egy szövegfájlban levő páros számok számával.
# A függvény bemenő paramétere a fájl neve.
<br>
def paros_szamok_szama_a_fajlban(file):
    <br>return sum(1 for i in open(file).read().split() if int(i) % 2 == 0)


<br>
<br>
#18--------------------------------------------------------------------------------------------


# Feladat: Páratlan számok száma egy szövegfájlban.
# Írj egy függvényt paratlan_szamok_szama_a_fajlban néven, amely visszatér egy szövegfájlban levő páratlan számok számával.
# A függvény bemenő paramétere a fájl neve.
<br>
def paratlan_szamok_szama_a_fajlban(file):
    <br>return sum(1 for i in open(file).read().split() if int(i) % 2 == 1)


<br>
<br>
#19--------------------------------------------------------------------------------------------


# Feladat: Pozitív számok száma egy szövegfájlban.
# Írj egy függvényt pozitiv_szamok_szama_a_fajlban néven, amely visszatér egy szövegfájlban levő pozitiv számok számával.
# A függvény bemenő paramétere a fájl neve.
<br>
def pozitiv_szamok_szama_a_fajlban(file):
    <br>return sum(1 for i in open(file).read().split() if int(i) > 0)

<br>
<br>
#20--------------------------------------------------------------------------------------------


# Feladat: Negatív számok száma egy szövegfájlban.
# Írj egy függvényt negativ_szamok_szama_a_fajlban néven, amely visszatér egy szövegfájlban levő negativ számok számával.
# A függvény bemenő paramétere a fájl neve.
<br>
def negativ_szamok_szama_a_fajlban(file):

    <br>return sum(1 for i in open(file).read().split() if int(i) < 0)


<br>
<br>
#21--------------------------------------------------------------------------------------------


# Feladat: Legkisebb szám egy szövegfájlban.
# Írj egy függvényt legkisebb_szam_a_fajlban néven, amely visszatér egy szövegfájlban levő lekisebb számmal.
# A függvény bemenő paramétere a fájl neve.
<br>
def legkisebb_szam_a_fajlban(file):
    <br>return min(int(i) for i in open(file).read().split())

<br>
<br>
#22--------------------------------------------------------------------------------------------


# Feladat: Legnagyobb szám egy szövegfájlban.
# Írj egy függvényt legnagyobb_szam_a_fajlban néven, amely visszatér egy szövegfájlban levő legnagyobb számmal.
# A függvény bemenő paramétere a fájl neve.
<br>
def legnagyobb_szam_a_fajlban(file):
    <br>return max(int(i) for i in open(file).read().split())
<br>
<br>
#23--------------------------------------------------------------------------------------------


# Feladat: Párosok egy szövegfájlból.
# Írj egy függvényt parosok_a_fajlbol néven, amely visszatér a szövegfájlban levő páros számokkal mint listával.
# A függvény bemenő paramétere a fájl neve.
<br>
def parosok_a_fajlbol(file):
    <br>return [int(i) for i in open(file).read().split() if int(i) % 2 == 0]

    

<br>
<br>
#24--------------------------------------------------------------------------------------------


# Feladat: Páratlanok egy szövegfájlból.
# Írj egy függvényt paratlanok_a_fajlbol néven, amely visszatér a szövegfájlban levő páratlan számokkal mint listával.
# A függvény bemenő paramétere a fájl neve.
<br>
def paratlanok_a_fajlbol(file):
    <br>return [int(i) for i in open(file).read().split() if int(i) % 2 == 1]


<br>
<br>
#25--------------------------------------------------------------------------------------------


# Feladat: Pozitívok egy szövegfájlból.
# Írj egy függvényt pozitiv_a_fajlbol néven, amely visszatér a szövegfájlban levő pozitiv számokkal mint listával.
# A függvény bemenő paramétere a fájl neve.
<br>
def pozitivok_a_fajlbol(file):
    <br>return [int(i) for i in open(file).read().split() if int(i) > 0]


<br>
<br>
#26--------------------------------------------------------------------------------------------


# Feladat: Negatívok egy szövegfájlból.
# Írj egy függvényt negativok_a_fajlbol néven, amely visszatér a szövegfájlban levő negativ számokkal mint listával.
# A függvény bemenő paramétere a fájl neve.
<br>
def negativok_a_fajlbol(file):
    <br>return [int(i) for i in open(file).read().split() if int(i) < 0]

<br>
<br>
#27--------------------------------------------------------------------------------------------


# Feladat: Leggyakoribb szám a szövegfájlban.
# Írj egy függvényt leggyakoribb_szam_a_fajlban néven, amely visszatér a szövegfájlban levő leggyakoribb számmal.
# A függvény bemenő paramétere a fájl neve.
<br>
def leggyakoribb_szam_a_fajlban(file):
    <br>szotar = {}
    <br>for i in open(file).read().split():
        <br>szotar[i] = szotar.get(i, 0) + 1
    <br>return int(max(szotar, key=szotar.get))
    
<br>
<br>
#28--------------------------------------------------------------------------------------------


# Feladat: Hárommal osztható számok a szövegfájlban.
# Írj egy függvényt harommal_oszthato_szamok_a_fajlban néven, amely visszatér a szövegfájlban levő hárommal osztható számok listájával.
# A függvény bemenő paramétere a fájl neve.
<br>
def harommal_oszthato_szamok_a_fajlban(file):
    <br>return [int(i) for i in open(file).read().split() if int(i) % 3 == 0]

<br>
<br>
#29--------------------------------------------------------------------------------------------


# Feladat: Neggyel osztható számok a szövegfájlban.
# Írj egy függvényt neggyel_oszthato_szamok_a_fajlban néven, amely visszatér a szövegfájlban levő neggyel osztható számok listájával.
# A függvény bemenő paramétere a fájl neve.
<br>
def neggyel_oszthato_szamok_a_fajlban(file):
    <br>return [int(i) for i in open(file).read().split() if int(i) % 4 == 0]



#======================================================================================
    </p>
        
        <!-- Load external JavaScript -->
        <script src="scripts.js"></script>
        
    </body>

</html>
